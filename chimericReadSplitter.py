#! /usr/bin/python# Written by Simon Watson and Matt Cotten, Wellcome Trust Sanger Institute# To use this script, change the following strings to point to your installs:## 1) Location of QUASR Python modules folder (QUASR can be downloaded from https://github.com/simonjwatson/QUASR)# 2) Location of BLAST database file stem# 3) Location of BLASTN binary# Takes a chimeric read and splits it in two# returning a file containing the split reads## 01-04-2016 update# MC found that reverse complements of motifs are absent after chimeric splitting# Fixed by removing the bad code that reversed any sequence that hits in RC# MC also found and fixed off-by-1 bugimport sys, ossys.path.append('/Applications/QUASR_v6.09/modules/') # 1)import fastqfrom Bio.Blast.Applications import NcbiblastnCommandlinefrom Bio.Blast import NCBIXMLdef blast_reads(blast_string, reads, outprefix, outfh):	## LOCAL VARIABLES FOR BLASTING	blast_db = '/Applications/EBOV_PRIMER_TABLES_DB/ebola/Zaire_ebolavirus_KM034562' # 2)	blast_binary = '/Applications/ncbi-blast-2.3.0+/bin/blastn' # 3)	evalue = 0.01	xml_outfile = '/tmp/' + outprefix + '.xml'	chimeras = 0		# Performs the BLAST search using BioPython	cline = NcbiblastnCommandline(cmd=blast_binary, out=xml_outfile, outfmt=5, query="-", db=blast_db, evalue=evalue, max_target_seqs=1, num_threads=1)	stdout, stderr = cline(blast_string)	# Parses the XML outfile containing the BLAST hits	with open(xml_outfile, 'r') as blast_handle:		blast_records = NCBIXML.parse(blast_handle)		for blast_record in blast_records:			name = blast_record.query			for alignment in blast_record.alignments:				count = 1				for hsp in alignment.hsps:					db_hit_start = hsp.sbjct_start					db__hit_end = hsp.sbjct_end					read_hit_start = hsp.query_start-1 #python counting					read_hit_end = hsp.query_end 										seq_hit = reads[name].sequence[read_hit_start:read_hit_end]					qual_hit = reads[name].quality[read_hit_start:read_hit_end]									outfh.write('@%s:%d\n%s\n+\n%s\n' % (name, count, seq_hit, qual_hit))					count += 1				if count == 2:					chimeras += 1						os.remove(xml_outfile)	return chimerasif len(sys.argv) != 4:	print('split_chimeric_reads.py <infile.fq> <outfile.fq> <num_to_parse>')	sys.exit(0)infile = sys.argv[1]outprefix = os.path.splitext(infile)[0]outfile = sys.argv[2]max_at_once = int(sys.argv[3])counter = 0chimeras = 0reads = {}blast_string = ''with open(infile, 'r') as infh, open(outfile, 'w') as outfh:	for header, sequence, quality in fastq.fastq_iterator(infh):		blast_string += '>%s\n%s\n' % (header, sequence)		reads[header] = fastq.FastqRecord(header, sequence, quality)		counter += 1		if counter == max_at_once:			chimeras += blast_reads(blast_string, reads, outprefix, outfh)			counter = 0			reads = {}			blast_string = ''	chimeras += blast_reads(blast_string, reads, outprefix, outfh)	print("TOTAL: %d chimeric read(s) split" % chimeras)